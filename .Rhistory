swirl()
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,  label = TRUE)
now()
this_moment<-now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dtl
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 22, minutes = 47, seconds = 55)
this_moment
?now
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart(hours = 17, minutes = 34))
depart <- update(depart, hours = 17, minutes = 34))
?update
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("~/Coursera/Reproducible Research/Assignment1/repdata-data-activity")
unzip('activity.zip')
unzip("activity.zip")
setwd("~/GitHub/RepData_PeerAssessment1")
unzip("activity.zip")
source('~/Coursera/Reproducible Research/Assignment1/repdata-data-activity/PA1_code_1.R')
head(activity)
str(activity)
activity$date <- as.date(activity$date)
activity$date <- ymd(activity$date)
str(activity)
summary(activity)
aggregate(activity, by = activity$date, sum)
aggregate(activity, by = list(date = activity$date), sum)
aggregate(activity$steps, by = list(date = activity$date), sum)
aggregate(activity, by = list(date = activity$date), sum, is.action = na.omit)
aggregate(activity, by = list(date = activity$date), FUN = sum, is.action = na.omit)
aggregate(activity, by = list(date = activity$date), FUN = sum)
aggregate(activity$steps, by = list(date = activity$date), sum)
aggregate(activity, by = list(date = activity$date), FUN = sum)
stepsbyday <- aggregate(activity, by = list(date = activity$date), FUN = sum)
stepsbyday <- aggregate(activity$steps, by = list(date = activity$date), sum)
hist(stepsbyday)
hist(stepsbyday$steps)
hist(stepsbyday$steps, rm.na = T)
str(stepsbyday)
stepsbyday.histdata <- stepsbyday[!is.na(stepsbyday),]
hist(stepsbyday.histdata$steps)
stepsbyday.histdata$steps
stepsbyday <- aggregate(steps = activity$steps, by = list(date = activity$date), sum)
stepsbyday <- aggregate(steps = activity$steps, by = list(date = activity$date), FUN = sum)
stepsbyday <- aggregate(list(steps = activity$steps), by = list(date = activity$date), FUN = sum)
head(stepsbyday)
hist(stepsbyday)
hist(stepsbyday$steps)
hist(stepsbyday$steps, main = 'Distribution of Steps per Day', xlab = "Steps per Day", ylab = "Days")
hist(stepsbyday$steps,breaks = 10, main = 'Distribution of Steps per Day', xlab = "Steps per Day", ylab = "Days")
hist(stepsbyday$steps,breaks = 20, main = 'Distribution of Steps per Day', xlab = "Steps per Day", ylab = "Days")
hist(stepsbyday$steps,breaks = 8, main = 'Distribution of Steps per Day', xlab = "Steps per Day", ylab = "Days")
hist(stepsbyday$steps,breaks = 10, main = 'Distribution of Steps per Day', xlab = "Steps per Day", ylab = "Days")
summary(stepsbyday$steps)
stepsbymin <- aggregate(list(steps = activity$steps), by = list(interval = activity$interval), FUN = mean)
head(stepsbymin)
stepsbymin
stepsbymin <- aggregate(list(steps = activity$steps), by = list(interval = activity$interval), FUN = mean, na.action = na.omit)
stepsbymin
stepsbymin <- aggregate(list(steps = activity$steps), by = list(interval = activity$interval), FUN = mean, rm.na = T)
stepsbymin
stepsbymin <- aggregate(list(steps = activity$steps), by = list(interval = activity$interval), FUN = mean, na.rm = T)
stepsbymin
plot(stepsbymin,type = "l")
plot(stepsbymin,type = "l", main = "Avg Steps by 5 Min Interval")
maxinterval <- stepsbymin[stepsbymin$steps == max(stepsbymin$steps),]
maxinterval
na.count <- sum(activity$steps[is.na,])
na.count <- sum(activity$steps[is.na])
na.count <- sum(activity$steps[is.na(acticity$steps)])
na.count <- sum(activity$steps[is.na(activity$steps)])
na.count
na.count <- sum(is.na(activity$steps))
na.count
imputemedian <- function(x) {
#calculate median by interval
stepsbyint <- aggregate(list(steps = activity$steps),
by = list(interval = activity$interval),
FUN = median,
na.rm = T
)
#loop throug the values of the data
for(i = 1:length(x)){
interval <- x$interval[i]
if(is.na(x$steps[i])) {
x$steps[i] = stepsbyint$steps[stepsbyint$interval == interval]
}
}
imputemedian <- x
}
imputemedian <- function(x) {
#calculate median by interval
stepsbyint <- aggregate(list(steps = activity$steps),
by = list(interval = activity$interval),
FUN = median,
na.rm = T
)
#loop throug the values of the data
for(i in 1:length(x)){
interval <- x$interval[i]
if(is.na(x$steps[i])) {
x$steps[i] = stepsbyint$steps[stepsbyint$interval == interval]
}
}
imputemedian <- x
}
activity.imp <- imputemedian(activity)
head(activity.imp)
summary(activity.imp)
stepsbyint <- aggregate(list(steps = activity$steps),
by = list(interval = activity$interval),
FUN = median,
na.rm = T
)
stepsbyint
View(activity.imp)
View(activity)
rnum(activity)
nrow(activity)
imputemedian <- function(x) {
#calculate median by interval
stepsbyint <- aggregate(list(steps = activity$steps),
by = list(interval = activity$interval),
FUN = median,
na.rm = T
)
#loop throug the values of the data
for(i in 1:nrow(x)){
interval <- x$interval[i]
if(is.na(x$steps[i])) {
x$steps[i] = stepsbyint$steps[stepsbyint$interval == interval]
}
}
imputemedian <- x
}
activity.imp <- imputemedian(activity)
View(activity.imp)
stepsbyday.imp <- aggregate(list(steps = activity.imp$steps),
by = list(date = activity.imp$date),
FUN = sum
)
hist(stepsbyday.imp$steps,
breaks = 10,
main = 'Distribution of Steps per Day',
xlab = "Steps per Day",
ylab = "Days"
)
summary(stepsbyday.imp)
summary(stepsbyday.imp$steps)
boxplot(list(stepsbyday.imp$steps,stepsbyday$steps)
)
boxplot(list(imputed = stepsbyday.imp$steps,excluded = stepsbyday$steps))
ativity.wday <- cbind(activity, weekdays(activity$date)
)
View(ativity.wday)
ativity.wday <- cbind(activity, dow = weekdays(activity$date))
View(ativity.wday)
dows <- unique(activity.wday$dow)
activity.wday <- cbind(activity, dow = weekdays(activity$date))
dows <- unique(activity.wday$dow)
wdays <- mapply(FUN = function(x){if(x %in% c("Sunday", "Saturday"){"weekend"}else{"weekday"}},dows )
wdays <- mapply(FUN = foo <- function(x){if(x %in% c("Sunday", "Saturday"){"weekend"}else{"weekday"}},dows )
wdays <- mapply(FUN = foo <- function(x){if(x %in% c("Sunday", "Saturday"){"weekend"}else{"weekday"}},dows )
wdays <- function(x){}
wdays <- function(x){
if(x %in% c("Sunday", "Saturday"){
wdays <- "weekend"
}else{
wdays <- "weekday"
}
}
wdays <- function(x){
ifelse(x %in% c("Sunday", "Saturday"),
wdays <- "weekend",
wdays <- "weekday"
)
}
wdays('Sunday')
sapply(dows,FUN = wdays)
lower("aa")
low("aa")
lcase("aa")
upper("aa")
activity.wday <- cbind(activity, weekdays(activity$date))
wdays <- function(x){
ifelse(tolower(x) %in% c("sunday", "saturday"),
wdays <- "weekend",
wdays <- "weekday"
)
}
activity.wday$wd <- sapply(activity.wday$dow, FUN = wdays)
head(sapply(activity.wday$dow, FUN = wdays))
View(activity.wday)
activity.wday <- cbind(activity, dow = weekdays(activity$date))
wdays <- function(x){
ifelse(tolower(x) %in% c("sunday", "saturday"),
wdays <- "weekend",
wdays <- "weekday"
)
}
activity.wday$wd <- sapply(activity.wday$dow, FUN = wdays)
View(activity.wday)
table(activity.wday$wd)
require(ggplot2)
p.tmp <- ggplot(data = activity.wday[,c(1,3,5)], aes(x = interval, y = steps) +
geom_line() +
facet_grid(wday ~ .)
p.tmp <- ggplot(data = activity.wday[,c(1,3,5)], aes(x = interval, y = steps)) +
geom_line() +
facet_grid(wday ~ .)
p.tmp
activity.wday <- cbind(activity.imp, dow = weekdays(activity.imp$date))
wdays <- function(x){
ifelse(tolower(x) %in% c("sunday", "saturday"),
wdays <- "weekend",
wdays <- "weekday"
)
}
activity.wday$wd <- sapply(activity.wday$dow, FUN = wdays)
#plot weekend vs. weekdays as line graph using ggplot2
require(ggplot2)
p.tmp <- ggplot(data = activity.wday[,c(1,3,5)], aes(x = interval, y = steps)) +
geom_line()
p.tmp + facet_grid(wday ~ .)
View(activity.wday)
activity.wday[,c(1,3,5)]
p.tmp <- ggplot(data = activity.wday[,c(1,3,5)], aes(interval, steps)) +
geom_line()
p.tmp
p.tmp + facet_grid(wday ~ .)
p.tmp + facet_grid(. ~ wday)
p.tmp + facet_grid(wday)
p.tmp + facet_grid(. ~ wd)
p.tmp + facet_grid(. ~ wd) + geom_point
activity.wday <- cbind(activity.imp, dow = weekdays(activity.imp$date))
wdays <- function(x){
ifelse(tolower(x) %in% c("sunday", "saturday"),
wdays <- "weekend",
wdays <- "weekday"
)
}
activity.wday$wd <- sapply(activity.wday$dow, FUN = wdays)
stepsbyday.imp.wday <- aggregate(list(steps = activity.wday$steps),
by = list(interval = activity.wday$interval,
wd = activity.wday$wd
),
FUN = mean
)
#plot weekend vs. weekdays as line graph using ggplot2
require(ggplot2)
p.tmp <- ggplot(data = stepsbyday.imp.wday, aes(interval, steps)) +
geom_line()
p.tmp + facet_grid(wd ~ .)
p.tmp <- ggplot(data = stepsbyday.imp.wday, aes(interval, steps)) +
geom_line()
p.tmp + facet_grid(. ~ wd)
